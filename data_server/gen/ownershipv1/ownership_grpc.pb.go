// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: ownership.proto

package ownershipv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OwnershipService_Health_FullMethodName          = "/trustflow.ownership.v1.OwnershipService/Health"
	OwnershipService_CreateOwnership_FullMethodName = "/trustflow.ownership.v1.OwnershipService/CreateOwnership"
	OwnershipService_UpdateOwnership_FullMethodName = "/trustflow.ownership.v1.OwnershipService/UpdateOwnership"
	OwnershipService_DeleteOwnership_FullMethodName = "/trustflow.ownership.v1.OwnershipService/DeleteOwnership"
)

// OwnershipServiceClient is the client API for OwnershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OwnershipServiceClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	CreateOwnership(ctx context.Context, in *CreateOwnershipRequest, opts ...grpc.CallOption) (*CreateOwnershipResponse, error)
	UpdateOwnership(ctx context.Context, in *UpdateOwnershipRequest, opts ...grpc.CallOption) (*UpdateOwnershipResponse, error)
	DeleteOwnership(ctx context.Context, in *DeleteOwnershipRequest, opts ...grpc.CallOption) (*DeleteOwnershipResponse, error)
}

type ownershipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOwnershipServiceClient(cc grpc.ClientConnInterface) OwnershipServiceClient {
	return &ownershipServiceClient{cc}
}

func (c *ownershipServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, OwnershipService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownershipServiceClient) CreateOwnership(ctx context.Context, in *CreateOwnershipRequest, opts ...grpc.CallOption) (*CreateOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOwnershipResponse)
	err := c.cc.Invoke(ctx, OwnershipService_CreateOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownershipServiceClient) UpdateOwnership(ctx context.Context, in *UpdateOwnershipRequest, opts ...grpc.CallOption) (*UpdateOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOwnershipResponse)
	err := c.cc.Invoke(ctx, OwnershipService_UpdateOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownershipServiceClient) DeleteOwnership(ctx context.Context, in *DeleteOwnershipRequest, opts ...grpc.CallOption) (*DeleteOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOwnershipResponse)
	err := c.cc.Invoke(ctx, OwnershipService_DeleteOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwnershipServiceServer is the server API for OwnershipService service.
// All implementations must embed UnimplementedOwnershipServiceServer
// for forward compatibility.
type OwnershipServiceServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	CreateOwnership(context.Context, *CreateOwnershipRequest) (*CreateOwnershipResponse, error)
	UpdateOwnership(context.Context, *UpdateOwnershipRequest) (*UpdateOwnershipResponse, error)
	DeleteOwnership(context.Context, *DeleteOwnershipRequest) (*DeleteOwnershipResponse, error)
	mustEmbedUnimplementedOwnershipServiceServer()
}

// UnimplementedOwnershipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOwnershipServiceServer struct{}

func (UnimplementedOwnershipServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedOwnershipServiceServer) CreateOwnership(context.Context, *CreateOwnershipRequest) (*CreateOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwnership not implemented")
}
func (UnimplementedOwnershipServiceServer) UpdateOwnership(context.Context, *UpdateOwnershipRequest) (*UpdateOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnership not implemented")
}
func (UnimplementedOwnershipServiceServer) DeleteOwnership(context.Context, *DeleteOwnershipRequest) (*DeleteOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwnership not implemented")
}
func (UnimplementedOwnershipServiceServer) mustEmbedUnimplementedOwnershipServiceServer() {}
func (UnimplementedOwnershipServiceServer) testEmbeddedByValue()                          {}

// UnsafeOwnershipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwnershipServiceServer will
// result in compilation errors.
type UnsafeOwnershipServiceServer interface {
	mustEmbedUnimplementedOwnershipServiceServer()
}

func RegisterOwnershipServiceServer(s grpc.ServiceRegistrar, srv OwnershipServiceServer) {
	// If the following call pancis, it indicates UnimplementedOwnershipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OwnershipService_ServiceDesc, srv)
}

func _OwnershipService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnershipServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnershipService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnershipServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnershipService_CreateOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnershipServiceServer).CreateOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnershipService_CreateOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnershipServiceServer).CreateOwnership(ctx, req.(*CreateOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnershipService_UpdateOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnershipServiceServer).UpdateOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnershipService_UpdateOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnershipServiceServer).UpdateOwnership(ctx, req.(*UpdateOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnershipService_DeleteOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnershipServiceServer).DeleteOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnershipService_DeleteOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnershipServiceServer).DeleteOwnership(ctx, req.(*DeleteOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OwnershipService_ServiceDesc is the grpc.ServiceDesc for OwnershipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OwnershipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trustflow.ownership.v1.OwnershipService",
	HandlerType: (*OwnershipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _OwnershipService_Health_Handler,
		},
		{
			MethodName: "CreateOwnership",
			Handler:    _OwnershipService_CreateOwnership_Handler,
		},
		{
			MethodName: "UpdateOwnership",
			Handler:    _OwnershipService_UpdateOwnership_Handler,
		},
		{
			MethodName: "DeleteOwnership",
			Handler:    _OwnershipService_DeleteOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ownership.proto",
}
