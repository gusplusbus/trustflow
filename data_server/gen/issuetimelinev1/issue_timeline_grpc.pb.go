// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: issue_timeline.proto

package issuetimelinev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssuesTimelineService_GetCheckpoint_FullMethodName = "/trustflow.issues_timeline.v1.IssuesTimelineService/GetCheckpoint"
	IssuesTimelineService_AppendBatch_FullMethodName   = "/trustflow.issues_timeline.v1.IssuesTimelineService/AppendBatch"
)

// IssuesTimelineServiceClient is the client API for IssuesTimelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssuesTimelineServiceClient interface {
	GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*GetCheckpointResponse, error)
	AppendBatch(ctx context.Context, in *AppendBatchRequest, opts ...grpc.CallOption) (*AppendBatchResponse, error)
}

type issuesTimelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesTimelineServiceClient(cc grpc.ClientConnInterface) IssuesTimelineServiceClient {
	return &issuesTimelineServiceClient{cc}
}

func (c *issuesTimelineServiceClient) GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*GetCheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCheckpointResponse)
	err := c.cc.Invoke(ctx, IssuesTimelineService_GetCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesTimelineServiceClient) AppendBatch(ctx context.Context, in *AppendBatchRequest, opts ...grpc.CallOption) (*AppendBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendBatchResponse)
	err := c.cc.Invoke(ctx, IssuesTimelineService_AppendBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesTimelineServiceServer is the server API for IssuesTimelineService service.
// All implementations must embed UnimplementedIssuesTimelineServiceServer
// for forward compatibility.
type IssuesTimelineServiceServer interface {
	GetCheckpoint(context.Context, *GetCheckpointRequest) (*GetCheckpointResponse, error)
	AppendBatch(context.Context, *AppendBatchRequest) (*AppendBatchResponse, error)
	mustEmbedUnimplementedIssuesTimelineServiceServer()
}

// UnimplementedIssuesTimelineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssuesTimelineServiceServer struct{}

func (UnimplementedIssuesTimelineServiceServer) GetCheckpoint(context.Context, *GetCheckpointRequest) (*GetCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}
func (UnimplementedIssuesTimelineServiceServer) AppendBatch(context.Context, *AppendBatchRequest) (*AppendBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendBatch not implemented")
}
func (UnimplementedIssuesTimelineServiceServer) mustEmbedUnimplementedIssuesTimelineServiceServer() {}
func (UnimplementedIssuesTimelineServiceServer) testEmbeddedByValue()                               {}

// UnsafeIssuesTimelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuesTimelineServiceServer will
// result in compilation errors.
type UnsafeIssuesTimelineServiceServer interface {
	mustEmbedUnimplementedIssuesTimelineServiceServer()
}

func RegisterIssuesTimelineServiceServer(s grpc.ServiceRegistrar, srv IssuesTimelineServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssuesTimelineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssuesTimelineService_ServiceDesc, srv)
}

func _IssuesTimelineService_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesTimelineServiceServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesTimelineService_GetCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesTimelineServiceServer).GetCheckpoint(ctx, req.(*GetCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuesTimelineService_AppendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesTimelineServiceServer).AppendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesTimelineService_AppendBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesTimelineServiceServer).AppendBatch(ctx, req.(*AppendBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssuesTimelineService_ServiceDesc is the grpc.ServiceDesc for IssuesTimelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssuesTimelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trustflow.issues_timeline.v1.IssuesTimelineService",
	HandlerType: (*IssuesTimelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckpoint",
			Handler:    _IssuesTimelineService_GetCheckpoint_Handler,
		},
		{
			MethodName: "AppendBatch",
			Handler:    _IssuesTimelineService_AppendBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issue_timeline.proto",
}
